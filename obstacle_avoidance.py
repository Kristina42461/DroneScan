import time
import threading
import cv2

class ObstacleAvoidance:
    def __init__(self, tello, frame_read):
        self.tello = tello
        self.frame_read = frame_read

        self.CANNY_THRESHOLD1 = 50
        self.CANNY_THRESHOLD2 = 150
        self.MIN_CONTOUR_AREA = 5000
        self.FRAME_WIDTH = 960
        self.FRAME_HEIGHT = 720
        self.AVOID_SPEED = 20

        self.DANGER_DISTANCE_THRESHOLD = 60  # –ß–µ–º –º–µ–Ω—å—à–µ ‚Äî —Ç–µ–º –±–ª–∏–∂–µ –æ–±—ä–µ–∫—Ç
        self.turning = False

        self.tello_vx = 0
        self.tello_vy = 0
        self.tello_vz = 0
        self.tello_yaw = 0
        self.send_rc_commands = False
        self.auto_avoidance_active = False
        self.control_thread = threading.Thread(target=self.drone_control_thread)
        self.control_thread.daemon = True
        self.control_thread.start()
        self._running = False

        # –î–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        self.wall_detection_history = []
        self.HISTORY_LENGTH = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        self.WALL_DETECTION_THRESHOLD = 3  # –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ 3 –∏ –±–æ–ª–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö

    def is_in_central_zone(self, bbox, zone_ratio=0.5):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ –∫–∞–¥—Ä–∞"""
        x, y, w, h = bbox
        center_x = x + w / 2
        center_y = y + h / 2
        zone_x_min = self.FRAME_WIDTH * (0.5 - zone_ratio / 2)
        zone_x_max = self.FRAME_WIDTH * (0.5 + zone_ratio / 2)
        zone_y_min = self.FRAME_HEIGHT * (0.5 - zone_ratio / 2)
        zone_y_max = self.FRAME_HEIGHT * (0.5 + zone_ratio / 2)
        return zone_x_min <= center_x <= zone_x_max and zone_y_min <= center_y <= zone_y_max

    def estimate_distance(self, contour):
        _, _, w, h = cv2.boundingRect(contour)
        if w * h == 0:
            return float('inf')
        return 1000 / (w * h)

    def process(self):
        frame = self.frame_read.frame
        if frame is None:
            return

        frame = cv2.resize(frame, (self.FRAME_WIDTH, self.FRAME_HEIGHT))
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blurred = cv2.GaussianBlur(gray, (5, 5), 0)
        edges = cv2.Canny(blurred, self.CANNY_THRESHOLD1, self.CANNY_THRESHOLD2)

        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        obstacles = [cnt for cnt in contours if cv2.contourArea(cnt) > self.MIN_CONTOUR_AREA]

        print(f"[DEBUG] –ö–æ–ª-–≤–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π: {len(obstacles)}")

        if self.turning:
            print("[INFO] –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ ‚Äî –∫–æ–º–∞–Ω–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
            return

        wall_detected_this_frame = False

        for cnt in obstacles:
            x, y, w, h = cv2.boundingRect(cnt)
            distance = self.estimate_distance(cnt)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã: —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–µ –∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞–¥—Ä–∞ —Å—á–∏—Ç–∞–µ–º —Å—Ç–µ–Ω–æ–π
            if distance < self.DANGER_DISTANCE_THRESHOLD and self.is_in_central_zone((x, y, w, h)):
                print(f"üß± –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥–ª—É—Ö–∞—è —Å—Ç–µ–Ω–∞ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç")
                wall_detected_this_frame = True

                # –ù–∞—Ä–∏—Å—É–µ–º –Ω–∞ –∫–∞–¥—Ä–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)
                break

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —É—Å—Ä–µ–¥–Ω—è–µ–º
        self.wall_detection_history.append(wall_detected_this_frame)
        if len(self.wall_detection_history) > self.HISTORY_LENGTH:
            self.wall_detection_history.pop(0)

        wall_detections_count = sum(self.wall_detection_history)

        if wall_detections_count >= self.WALL_DETECTION_THRESHOLD:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å—Ç–µ–Ω–∞ ‚Äî —Ä–∞–∑–≤–æ—Ä–æ—Ç
            self.turning = True
            self.tello.rotate_clockwise(180)
            time.sleep(2)
            self.turning = False
            self.wall_detection_history.clear()
            print("[INFO] –†–∞–∑–≤–æ—Ä–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            return

        # –ï—Å–ª–∏ —Å—Ç–µ–Ω—ã –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–≤–∏–∂–µ–Ω–∏—è)
        self.tello.send_rc_control(0, 0, 0, 0)
        print("‚úÖ –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–¥—Ä —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        #cv2.imshow("Obstacle Avoidance Debug", frame)
        #cv2.waitKey(1)

    def drone_control_thread(self):
        while True:
            if self.send_rc_commands:
                self.tello.send_rc_control(
                    self.tello_vx,
                    self.tello_vy,
                    self.tello_vz,
                    self.tello_yaw
                )
            time.sleep(0.05)

    def start(self):
        self._running = True

    def stop(self):
        self._running = False
        self.send_rc_commands = False
        self.tello.send_rc_control(0, 0, 0, 0)

    def set_active(self, active: bool):
        self.auto_avoidance_active = active
